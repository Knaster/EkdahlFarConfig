def processInformationForChart(inSerialHandler, command):
    inSerialHandler.chartCommandSignal.emit(command)
    return

    match command.command:
        case "adcr":
            inSerialHandler.chartDataSignal.emit("Adc#" + str(command.argument[0]), float(command.argument[1]), timedChart.seriesType.integer) #0, 65535)
        case "bcf":
            inSerialHandler.chartDataSignal.emit("Targ.Freq", float(command.argument[0]), timedChart.seriesType.frequency) # 0, 65535)
        case "bmf":
            inSerialHandler.chartDataSignal.emit("Mot.Freq", float(command.argument[0]), timedChart.seriesType.frequency) #0, 65535)
        case "psf":
            if (float(command.argument[0]) > 0):
                inSerialHandler.chartDataSignal.emit("FFT Freq", float(command.argument[0]), timedChart.seriesType.frequency) #0, 65535)
        case "pap":
            inSerialHandler.chartDataSignal.emit("Aud.peak", float(command.argument[0])*65535, timedChart.seriesType.integer)  # 0, 65535)
        case "par":
            inSerialHandler.chartDataSignal.emit("Aud.RMS", float(command.argument[0])*65535, timedChart.seriesType.integer)  # 0, 65535)
        case "bpperr":
            inSerialHandler.chartDataSignal.emit("PIDPeakErr", float(command.argument[0]), timedChart.seriesType.frequency) #0, 65535)
        case _:
            return False
    return True

def setSeriesVisible(self, seriesID, inSeriesType, visible):
s = self.getSeries(seriesID)

if s is None:
    s = self.addSeries(seriesID, inSeriesType)
    if s is None:
        return

s.setVisible(visible)
#s.setVisible(True)

""""
    mainWidget.ui.checkBoxChartA0.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartA0.seriesCommand = "adcr0"   #mainWidget.ui.checkBoxChartA0.seriesName = "Adc#0"
    mainWidget.ui.checkBoxChartA0.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartA1.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartA1.seriesCommand = "adcr1"   #mainWidget.ui.checkBoxChartA1.seriesName = "adcr1" #Adc#1"
    mainWidget.ui.checkBoxChartA1.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartA2.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartA2.seriesCommand = "adcr2"   #mainWidget.ui.checkBoxChartA2.seriesName = "Adc#2"
    mainWidget.ui.checkBoxChartA2.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartA3.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartA3.seriesCommand = "adcr3"   #mainWidget.ui.checkBoxChartA3.seriesName = "Adc#3"
    mainWidget.ui.checkBoxChartA3.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartA4.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartA4.seriesCommand = "adcr4"   #mainWidget.ui.checkBoxChartA4.seriesName = "Adc#4"
    mainWidget.ui.checkBoxChartA4.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartA5.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartA5.seriesCommand = "adcr5"   #mainWidget.ui.checkBoxChartA5.seriesName = "Adc#5"
    mainWidget.ui.checkBoxChartA5.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartA6.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartA6.seriesCommand = "adcr6"   #mainWidget.ui.checkBoxChartA6.seriesName = "Adc#6"
    mainWidget.ui.checkBoxChartA6.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartA7.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartA7.seriesCommand = "adcr7"   #mainWidget.ui.checkBoxChartA7.seriesName = "Adc#7"
    mainWidget.ui.checkBoxChartA7.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartAudPk.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartAudPk.seriesCommand = "pap"  #mainWidget.ui.checkBoxChartAudPk.seriesName = "Aud.peak"
    mainWidget.ui.checkBoxChartAudPk.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartAudRMS.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartAudRMS.seriesCommand = "par" #mainWidget.ui.checkBoxChartAudRMS.seriesName = "Aud.RMS"
    mainWidget.ui.checkBoxChartAudRMS.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartAudFFT.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartAudFFT.seriesCommand = "psf" #mainWidget.ui.checkBoxChartAudFFT.seriesName = "FFT Freq"
    mainWidget.ui.checkBoxChartAudFFT.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartMotFreq.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartMotFreq.seriesCommand = "bmf"    #mainWidget.ui.checkBoxChartMotFreq.seriesName = "Mot.Freq"
    mainWidget.ui.checkBoxChartMotFreq.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartReadFreq.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartReadFreq.seriesCommand = "bcf"   #mainWidget.ui.checkBoxChartReadFreq.seriesName = "Targ.Freq"
    mainWidget.ui.checkBoxChartReadFreq.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartPeakErr.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartPeakErr.seriesCommand = "bpperr" #mainWidget.ui.checkBoxChartPeakErr.seriesName = "PIDPeakErr"
    mainWidget.ui.checkBoxChartPeakErr.seriesType = timedChart.seriesType.integer

    mainWidget.ui.checkBoxChartMotCurr.toggled.connect(mainWidget.checkBoxChartToggled)
    mainWidget.ui.checkBoxChartMotCurr.seriesCommand = "bmc"    #mainWidget.ui.checkBoxChartMotCurr.seriesName = "Mot.Curr"
    mainWidget.ui.checkBoxChartMotCurr.seriesType = timedChart.seriesType.integer
"""""

--------------------------


    def retrieveUsingFormat(formatString):
        pass

    def getBowRestPosition(self):
        return self.bowRestPosition

    def setBowRestPosition(self, position):
        self.bowRestPosition = position;

    def getBowMinPressure(self):
        return self.bowMinPressure

    def setBowMinPressure(self, pressure):
        self.bowMinPressure = pressure;

    def getBowMaxPressure(self):
        return self.bowMaxPressure

    def setBowMaxPressure(self, pressure):
        self.bowMaxPressure = pressure;

    def getBowMotorMinSpeed(self):
        return self.bowMotorMinSpeed

    def setBowMotorMinSpeed(self, speed):
        self.bowMotorMinSpeed = speed;

    def getBowMotorMaxSpeed(self):
        return self.bowMotorMaxSpeed

    def setBowMotorMaxSpeed(self, speed):
        self.bowMotorMaxSpeed = speed;

    def getMuteRestPosition(self):
        return self.muteRestPosition

    def setMuteRestPosition(self, position):
        self.muteRestPosition = position;

    def getMuteHalfMutePosition(self):
        return self.muteHalfMutePosition

    def setMuteHalfMutePosition(self, position):
        self.muteHalfMutePosition = position;

    def getMuteFullMutePosition(self):
        return self.muteFullMutePosition

    def setMuteFullMutePosition(self, position):
        self.muteFullMutePosition = position;

    def getMuteBackoff(self):
        return self.muteBackoff

    def setMuteBackoff(self, backoff):
        self.muteBackoff = backoff

#    def getBowTimeOut(self):
#        return self.bowTimeOut

#    def setBowTimeOut(self, timeOut):
#        self.bowTimeOut = timeOut;

    def getIntegratorError(self):
        return self.integratorError

    def setIntegratorError(self, ie):
        self.integratorError = ie;

    def getPIDKp(self):
        return self.pidKp

    def setPIDKp(self, Kp):
        self.pidKp = Kp

    def getPIDKi(self):
        return self.pidKi

    def setPIDKi(self, Ki):
        self.pidKi = Ki

    def getPIDKd(self):
        return self.pidKd

    def setPIDKd(self, Kd):
        self.pidKd = Kd

#    def getMotorVoltage(self):
#        return self.bowMotorVoltage

#    def setMotorVoltage(self, inVoltage):
#        self.bowMotorVoltage = inVoltage

#    def getFundamentalFrequency(self):
#        return self.fundamentalFrequency

#    def setFundamentalFrequency(self, inFundamentalFrequency):
#        self.fundamentalFrequency = float(inFundamentalFrequency)

    def setSolenoidMaxForce(self, maxForce):
        self.solenoidMaxForce = maxForce

    def setSolenoidMinForce(self, minForce):
        self.solenoidMinForce = minForce

    def getSolenoidMaxForce(self):
        return self.solenoidMaxForce

    def getSolenoidMinForce(self):
        return self.solenoidMinForce

    def setSetFrequency(self, freq):
        self.setFrequency = freq

    def getSolenoidEngageDuration(self):
        return self.solenoidEngageDuration

    def setSolenoidEngageDuration(self, duration):
        self.solenoidEngageDuration = duration

    def getSetFrequency(self):
        return self.setFrequency

#        self.fundamentalFrequency = float(-1)
#        self.bowMotorVoltage = float(-1)
        self.pidKp = float(-1)
        self.pidKi = float(-1)
        self.pidKd = float(-1)
        self.integratorError = float(-1)
#        self.bowTimeOut = float(-1)
        self.muteFullMutePosition = float(-1)
        self.muteHalfMutePosition = float(-1)
        self.muteRestPosition = float(-1)
        self.muteBackoff = float(-1)
        self.bowMotorMaxSpeed = float(-1)
        self.bowMotorMinSpeed = float(-1)
        self.bowMaxPressure = float(-1)
        self.bowMinPressure = float(-1)
        self.bowRestPosition = float(-1)

        self.stringFrequency = float(-1)
        self.bowFrequency = float(-1)
        self.bowCurrent = float(-1)
        self.setFrequency = float(-1)

        self.solenoidMinForce = float(-1)
        self.solenoidMaxForce = float(-1)
        self.solenoidEngageDuration = float(-1)
